.data
	array: .space 24	# 7 * 4 = 28
	symbol: .space 24	# 7 * 4 = 28	maybe 24 ?
	stack: .space 72	# 6 * 3 * 4 = 72
	str_space: .asciiz " "
	str_enter: .asciiz "\n"
	
.text
	li	$v0, 5
	syscall
	move	$s0, $v0	# $s0 = n
	move	$a0, $s0
	
	la	$sp, stack
	addi	$sp, $sp, 68	# ?
	
	li	$a0, 0

	jal	FullArray
	
	subi	$sp, $sp, 68

	li	$v0, 10
	syscall
	
FullArray:
	li	$t0, 0		# $t0 = i
	blt	$a0, $s0, work	# $a0 is index
	nop
# if (index >= n)
for_1_begin:
	slt	$t1, $t0, $s0	# i < n
	beq	$t1, $0, for_1_end
	nop
	
	sll	$t1, $t0, 2	# offset t1 = t0 * 4 
	lw	$a0, array($t1)
	li	$v0, 1
	syscall
	
	addi	$t0, $t0, 1
	la	$a0, str_space
	li	$v0, 4
	syscall
	
	j	for_1_begin
	nop
	
for_1_end:
	la	$a0, str_enter
	li	$v0, 4
	syscall
	
	jr	$ra
	nop
work:
	move	$s1, $a0	# $s1 = index
	
	sw	$ra, 0($sp)
	subi	$sp, $sp, 4
	sw	$s1, 0($sp)
	subi	$sp, $sp, 4
	
	li	$t0, 0		# $t0 = i
for_2_begin:

	slt	$t1, $t0, $s0	# $s0 = n
	beq	$t1, $0, for_2_end
	nop
	
	sll	$t1, $t0, 4	# t1 = t0 * 4
	lw	$t2, symbol($t1)	# symbol[i]
	
if_1_begin:
	seq	$t1, $t2, $0	# symbol[i] == 0
	beq	$t1, $0, if_1_else
	nop
	
	addi	$t2, $t0, 1
	sll	$t1, $s1, 2
	sw	$t2, array($t1)	# array[index] = i + 1
	
	li	$t2, 1
	sll	$t1, $t0, 2
	sw	$t2, symbol($t1)	# symbol[i] = 1
	
	addi	$a0, $a0, 1	# $a0 = index + 1
	
	sw	$t0, 0($sp)
	subi	$sp, $sp, 4
	
	jal	FullArray
	nop
	
	addi	$sp, $sp, 4
	lw	$t0, 0($sp)
	
	li	$t2, 0
	sll	$t1, $t0, 2
	sw	$t2, symbol($t1)	# symbol[i] = 0
	
	j	if_1_end
	nop
if_1_else:

if_1_end:
	addi	$t0, $t0, 1		# i++
	move	$s1, $a0
	j	for_2_begin
	nop
for_2_end:
	addi	$sp, $sp, 4
	lw	$a0, 0($sp)
	addi	$sp, $sp, 4
	lw	$ra, 0($sp)

	
	jr	$ra
